"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createData = void 0;
const grpc_web_1 = require("@improbable-eng/grpc-web");
const user_pb_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb");
const user_pb_service_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb_service");
const fs_1 = __importDefault(require("fs"));
const ipfs_http_client_1 = __importDefault(require("ipfs-http-client"));
const it_block_1 = __importDefault(require("it-block"));
const path_1 = __importDefault(require("path"));
const normalize_1 = require("../normalize");
const util_1 = require("../util");
/**
 * @ignore
 */
const createData = (config, getMeta, getHeaders) => {
    const client = new user_pb_service_1.UserServiceClient(config.host, config);
    const ipfs = ipfs_http_client_1.default(config.host);
    return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        stage: (input) => __awaiter(void 0, void 0, void 0, function* () {
            // Only process the first  input if there are more than one
            const source = (yield normalize_1.normaliseInput(input).next()).value;
            return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
                var e_1, _a;
                const client = grpc_web_1.grpc.client(user_pb_service_1.UserService.Stage, config);
                client.onMessage((message) => {
                    resolve(message.toObject());
                });
                client.onEnd((code, msg) => {
                    if (code !== grpc_web_1.grpc.Code.OK) {
                        reject(`error code ${code} - ${msg}`);
                    }
                    else {
                        reject("ended with no message");
                    }
                });
                if (source === null || source === void 0 ? void 0 : source.content) {
                    client.start(getMeta());
                    const process = yield it_block_1.default({ size: 32000, noPad: true });
                    try {
                        for (var _b = __asyncValues(process(source.content)), _c; _c = yield _b.next(), !_c.done;) {
                            const chunk = _c.value;
                            const buf = chunk.slice();
                            const req = new user_pb_1.StageRequest();
                            req.setChunk(buf);
                            client.send(req);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    client.finishSend();
                }
                else {
                    reject(new Error("no content to stage"));
                }
            }));
        }),
        stageFolder: (path) => __awaiter(void 0, void 0, void 0, function* () {
            const src = ipfs_http_client_1.default.globSource(path, { recursive: true });
            const headers = getHeaders();
            const res = yield ipfs.add(src, { headers });
            return res.cid.string;
        }),
        get: (cid) => {
            return new Promise((resolve, reject) => {
                const append = (l, r) => {
                    const tmp = new Uint8Array(l.byteLength + r.byteLength);
                    tmp.set(l, 0);
                    tmp.set(r, l.byteLength);
                    return tmp;
                };
                let final = new Uint8Array();
                const req = new user_pb_1.GetRequest();
                req.setCid(cid);
                const stream = client.get(req, getMeta());
                stream.on("data", (resp) => {
                    final = append(final, resp.getChunk_asU8());
                });
                stream.on("end", (status) => {
                    if ((status === null || status === void 0 ? void 0 : status.code) !== grpc_web_1.grpc.Code.OK) {
                        reject(`error code ${status === null || status === void 0 ? void 0 : status.code} - ${status === null || status === void 0 ? void 0 : status.details}`);
                    }
                    else {
                        resolve(final);
                    }
                });
            });
        },
        getFolder: (cid, output, opts = {}) => __awaiter(void 0, void 0, void 0, function* () {
            var e_2, _d, e_3, _e;
            const headers = getHeaders();
            const options = { headers };
            if (opts.timeout) {
                options["timeout"] = opts.timeout;
            }
            try {
                for (var _f = __asyncValues(ipfs.get(cid, options)), _g; _g = yield _f.next(), !_g.done;) {
                    const file = _g.value;
                    const noCidPath = file.path.replace(cid, "");
                    const fullFilePath = path_1.default.join(output, noCidPath);
                    if (file.content) {
                        yield fs_1.default.promises.mkdir(path_1.default.join(output, path_1.default.dirname(file.path)), { recursive: true });
                        const stream = fs_1.default.createWriteStream(fullFilePath);
                        try {
                            for (var _h = (e_3 = void 0, __asyncValues(file.content)), _j; _j = yield _h.next(), !_j.done;) {
                                const chunk = _j.value;
                                const slice = chunk.slice();
                                yield new Promise((resolve, reject) => {
                                    stream.write(slice, (err) => {
                                        if (err) {
                                            reject(err);
                                        }
                                        else {
                                            resolve();
                                        }
                                    });
                                });
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_j && !_j.done && (_e = _h.return)) yield _e.call(_h);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    else {
                        // this is a dir
                        yield fs_1.default.promises.mkdir(fullFilePath, { recursive: true });
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_d = _f.return)) yield _d.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }),
        watchLogs: (handler, cid, opts = {}) => {
            const req = new user_pb_1.WatchLogsRequest();
            req.setCid(cid);
            if (opts.includeHistory) {
                req.setHistory(opts.includeHistory);
            }
            if (opts.jobId) {
                req.setJobId(opts.jobId);
            }
            const stream = client.watchLogs(req, getMeta());
            stream.on("data", (res) => {
                var _a;
                const logEntry = (_a = res.getLogEntry()) === null || _a === void 0 ? void 0 : _a.toObject();
                if (logEntry) {
                    handler(logEntry);
                }
            });
            return stream.cancel;
        },
        replaceData: (cid1, cid2) => {
            const req = new user_pb_1.ReplaceDataRequest();
            req.setCid1(cid1);
            req.setCid2(cid2);
            return util_1.promise((cb) => client.replaceData(req, getMeta(), cb), (res) => res.toObject());
        },
        cidSummary: (...cids) => {
            const req = new user_pb_1.CidSummaryRequest();
            req.setCidsList(cids);
            return util_1.promise((cb) => client.cidSummary(req, getMeta(), cb), (res) => res.toObject());
        },
        cidInfo: (cid) => {
            const req = new user_pb_1.CidInfoRequest();
            req.setCid(cid);
            return util_1.promise((cb) => client.cidInfo(req, getMeta(), cb), (res) => res.toObject());
        },
    };
};
exports.createData = createData;
//# sourceMappingURL=index.js.map