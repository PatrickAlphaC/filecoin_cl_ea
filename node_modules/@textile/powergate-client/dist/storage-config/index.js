"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorageConfig = void 0;
const user_pb_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb");
const user_pb_service_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb_service");
const util_1 = require("../util");
const util_2 = require("./util");
const createStorageConfig = (config, getMeta) => {
    const client = new user_pb_service_1.UserServiceClient(config.host, config);
    return {
        default: () => util_1.promise((cb) => client.defaultStorageConfig(new user_pb_1.DefaultStorageConfigRequest(), getMeta(), cb), (res) => res.toObject()),
        setDefault: (config) => {
            const c = new user_pb_1.StorageConfig();
            c.setRepairable(config.repairable);
            if (config.hot) {
                c.setHot(util_2.hotObjToMessage(config.hot));
            }
            if (config.cold) {
                c.setCold(util_2.coldObjToMessage(config.cold));
            }
            const req = new user_pb_1.SetDefaultStorageConfigRequest();
            req.setConfig(c);
            return util_1.promise((cb) => client.setDefaultStorageConfig(req, getMeta(), cb), (res) => res.toObject());
        },
        apply: (cid, opts) => {
            const req = new user_pb_1.ApplyStorageConfigRequest();
            req.setCid(cid);
            if (opts === null || opts === void 0 ? void 0 : opts.override) {
                req.setOverrideConfig(opts.override);
                req.setHasOverrideConfig(true);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.storageConfig) {
                const c = new user_pb_1.StorageConfig();
                c.setRepairable(opts.storageConfig.repairable);
                if (opts.storageConfig.hot) {
                    c.setHot(util_2.hotObjToMessage(opts.storageConfig.hot));
                }
                if (opts.storageConfig.cold) {
                    c.setCold(util_2.coldObjToMessage(opts.storageConfig.cold));
                }
                req.setConfig(c);
                req.setHasConfig(true);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.importDealIds) {
                req.setImportDealIdsList(opts.importDealIds);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.noExec) {
                req.setNoExec(opts.noExec);
            }
            return util_1.promise((cb) => client.applyStorageConfig(req, getMeta(), cb), (res) => res.toObject());
        },
        remove: (cid) => {
            const req = new user_pb_1.RemoveRequest();
            req.setCid(cid);
            return util_1.promise((cb) => client.remove(req, getMeta(), cb), (res) => res.toObject());
        },
    };
};
exports.createStorageConfig = createStorageConfig;
//# sourceMappingURL=index.js.map