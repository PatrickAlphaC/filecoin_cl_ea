"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorageJobs = void 0;
const admin_pb_1 = require("@textile/grpc-powergate-client/dist/powergate/admin/v1/admin_pb");
const admin_pb_service_1 = require("@textile/grpc-powergate-client/dist/powergate/admin/v1/admin_pb_service");
const user_pb_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb");
const storage_jobs_1 = require("../../storage-jobs");
const util_1 = require("../../util");
/**
 * @ignore
 */
const createStorageJobs = (config, getMeta) => {
    const client = new admin_pb_service_1.AdminServiceClient(config.host, config);
    return {
        list: (opts) => {
            const req = new admin_pb_1.ListStorageJobsRequest();
            if (opts === null || opts === void 0 ? void 0 : opts.ascending) {
                req.setAscending(opts.ascending);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.cidFilter) {
                req.setCidFilter(opts.cidFilter);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.limit) {
                req.setLimit(opts.limit);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.nextPageToken) {
                req.setNextPageToken(opts.nextPageToken);
            }
            if ((opts === null || opts === void 0 ? void 0 : opts.select) != undefined) {
                switch (opts.select) {
                    case storage_jobs_1.ListSelect.All:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_ALL);
                        break;
                    case storage_jobs_1.ListSelect.Queued:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_QUEUED);
                        break;
                    case storage_jobs_1.ListSelect.Executing:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_EXECUTING);
                        break;
                    case storage_jobs_1.ListSelect.Final:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_FINAL);
                        break;
                }
            }
            if (opts === null || opts === void 0 ? void 0 : opts.userId) {
                req.setUserIdFilter(opts.userId);
            }
            return util_1.promise((cb) => client.listStorageJobs(req, getMeta(), cb), (resp) => resp.toObject());
        },
        summary: (userId, cid) => {
            const req = new admin_pb_1.StorageJobsSummaryRequest();
            if (userId) {
                req.setUserId(userId);
            }
            if (cid) {
                req.setCid(cid);
            }
            return util_1.promise((cb) => client.storageJobsSummary(req, getMeta(), cb), (resp) => resp.toObject());
        },
    };
};
exports.createStorageJobs = createStorageJobs;
//# sourceMappingURL=index.js.map