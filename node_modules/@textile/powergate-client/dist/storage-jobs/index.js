"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorageJobs = exports.ListSelect = void 0;
const user_pb_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb");
const user_pb_service_1 = require("@textile/grpc-powergate-client/dist/powergate/user/v1/user_pb_service");
const util_1 = require("../util");
const types_1 = require("./types");
Object.defineProperty(exports, "ListSelect", { enumerable: true, get: function () { return types_1.ListSelect; } });
/**
 * @ignore
 */
const createStorageJobs = (config, getMeta) => {
    const client = new user_pb_service_1.UserServiceClient(config.host, config);
    return {
        get: (jobId) => {
            const req = new user_pb_1.StorageJobRequest();
            req.setJobId(jobId);
            return util_1.promise((cb) => client.storageJob(req, getMeta(), cb), (res) => res.toObject());
        },
        storageConfig: (jobId) => {
            const req = new user_pb_1.StorageConfigForJobRequest();
            req.setJobId(jobId);
            return util_1.promise((cb) => client.storageConfigForJob(req, getMeta(), cb), (res) => res.toObject());
        },
        list: (opts) => {
            const req = new user_pb_1.ListStorageJobsRequest();
            if (opts === null || opts === void 0 ? void 0 : opts.ascending) {
                req.setAscending(opts.ascending);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.cidFilter) {
                req.setCidFilter(opts.cidFilter);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.limit) {
                req.setLimit(opts.limit);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.nextPageToken) {
                req.setNextPageToken(opts.nextPageToken);
            }
            if ((opts === null || opts === void 0 ? void 0 : opts.select) != undefined) {
                switch (opts.select) {
                    case types_1.ListSelect.All:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_ALL);
                        break;
                    case types_1.ListSelect.Queued:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_QUEUED);
                        break;
                    case types_1.ListSelect.Executing:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_EXECUTING);
                        break;
                    case types_1.ListSelect.Final:
                        req.setSelector(user_pb_1.StorageJobsSelector.STORAGE_JOBS_SELECTOR_FINAL);
                        break;
                }
            }
            return util_1.promise((cb) => client.listStorageJobs(req, getMeta(), cb), (res) => res.toObject());
        },
        summary: (cid) => {
            const req = new user_pb_1.StorageJobsSummaryRequest();
            if (cid) {
                req.setCid(cid);
            }
            return util_1.promise((cb) => client.storageJobsSummary(req, getMeta(), cb), (res) => res.toObject());
        },
        watch: (handler, ...jobs) => {
            const req = new user_pb_1.WatchStorageJobsRequest();
            req.setJobIdsList(jobs);
            const stream = client.watchStorageJobs(req, getMeta());
            stream.on("data", (res) => {
                var _a;
                const job = (_a = res.getStorageJob()) === null || _a === void 0 ? void 0 : _a.toObject();
                if (job) {
                    handler(job);
                }
            });
            return stream.cancel;
        },
        cancel: (jobId) => {
            const req = new user_pb_1.CancelStorageJobRequest();
            req.setJobId(jobId);
            return util_1.promise((cb) => client.cancelStorageJob(req, getMeta(), cb), (res) => res.toObject());
        },
    };
};
exports.createStorageJobs = createStorageJobs;
//# sourceMappingURL=index.js.map